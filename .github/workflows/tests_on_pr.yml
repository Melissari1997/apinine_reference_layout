name: "Run tests on PR"

on:
  pull_request:
    branches: ["main"]

env:
  aws-role-name: github_actions_role
  aws-account-id: 600920596656
  aws-region: eu-central-1
  #TF_LOG: INFO
  terraform_version: "1.7.4"
  terraform_role_name: github_actions_terraform_apinine
  backend_bucket: terraform-be-bucket
  backend_key: apinine/terraform.tfstate
  lock_table: terraform-be-locktable

permissions:
  id-token: write
  contents: read
  issues: write # to write a comment on the PR

jobs:
  show:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: arn:aws:iam::${{ env.aws-account-id }}:role/${{ env.aws-role-name }}
          role-session-name: ${{ env.aws-role-name }}-session

      - name: Run tests
        run: |
          cd src
          make testall

      - name: Run dockerized risks tests
        run: |
          cd src
          make docker_risks

  tf_plan:
    permissions: write-all
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
        working-directory: ./infra

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws-region }}
          role-to-assume: arn:aws:iam::${{ env.aws-account-id }}:role/${{ env.terraform_role_name }}
          role-session-name: ${{ env.terraform_role_name }}-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}


      - name: Terraform format
        id: fmt
        run: terraform fmt -check


      - name: Terraform init
        id: init
        # setup bucket and lock table
        run: |
          terraform init \
            -backend-config="bucket=${{ env.backend_bucket }}" \
            -backend-config="key=${{ env.backend_key }}" \
            -backend-config="dynamodb_table=${{ env.lock_table }}"


      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true


      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
