name: terraform-plan

inputs:
  aws-region:
    required: true
    type: string
  aws-account-id:
    required: true
    type: string
  terraform_role_name:
    required: true
    type: string
  terraform_version:
    required: true
    type: string
  backend_bucket:
    required: true
    type: string
  backend_key:
    required: true
    type: string
  lock_table:
    required: true
    type: string
  GITHUB_TOKEN:
    required: true
    type: string
  working-directory:
    required: true
    type: string
  clean-checkout:
    required: false
    default: true

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        clean: ${{ inputs.clean-checkout }}

    - name: Debug  inside action
      shell: bash
      run: ls && pwd
      working-directory: ${{ inputs.working-directory }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ inputs.terraform_role_name }}
        role-session-name: ${{ inputs.terraform_role_name }}-session

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform format
      id: fmt
      shell: bash
      run: terraform fmt -check
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform init
      id: init
      shell: bash
      # setup bucket and lock table
      working-directory: ${{ inputs.working-directory }}
      run: |
        terraform init \
          -backend-config="bucket=${{ inputs.backend_bucket }}" \
          -backend-config="key=${{ inputs.backend_key }}" \
          -backend-config="dynamodb_table=${{ inputs.lock_table }}"

    - name: Terraform validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform Plan
      id: plan
      shell: bash
      run: terraform plan >/dev/null -no-color -out=tfplan
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: true

    - name: Terraform Show
      id: show
      shell: bash
      run: terraform show tfplan -no-color
      working-directory: ${{ inputs.working-directory }}

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
